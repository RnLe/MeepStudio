#!/usr/bin/env node
/**
 * Reads every *.yml in /changelog, converts each to an .mdx plus two artefacts:
 *   • /public/changelog-meta.json  – array of { date, version, type }
 *   • /changelog/index.ts          – barrel exporting every MDX component
 *
 * Output MDX files now contain **no front-matter**.  
 * Structure of every file:
 *
 *   # vX.Y.Z
 *   YYYY-MM-DD
 *   _General notes (italicised)_
 *
 *   ## SCOPE        (title-cased; omitted if empty)
 *   ### Added …     (capitalised; omitted if empty)
 *     – list item…
 *
 * The script is idempotent and deterministic.  Run via `pnpm build:changelog`.
 */
import fs from 'node:fs/promises';
import path from 'node:path';
import yaml from 'js-yaml';
import { semverDiff } from '../src/lib/semverDiff.js';

const ROOT      = path.resolve(new URL('.', import.meta.url).pathname, '..', '..');
const SRC_DIR   = path.join(ROOT, 'website/changelog');
const OUT_MDX   = path.join(SRC_DIR, 'mdx');
const META_PATH = path.join(ROOT, 'website/public', 'changelog-meta.json');
const INDEX_PATH= path.join(SRC_DIR, 'index.ts');

await fs.mkdir(OUT_MDX, { recursive: true });

/* ------------------------------------------------------------------------ */
/* 1.  Collect & sort yaml files                                            */
/* ------------------------------------------------------------------------ */
const files = (await fs.readdir(SRC_DIR))
  .filter(f => f.endsWith('.yml') && f !== 'example.yml')
  .sort();                                        // version filenames sort OK

let previousVersion = '0.0.0';
const meta   = [];
const barrel = [
  '// ⚠️  Auto-generated by scripts/build-changelog.js – DO NOT EDIT\n',
  '/* eslint-disable import/prefer-default-export */\n\n',
];

for (const file of files) {
  const raw         = await fs.readFile(path.join(SRC_DIR, file), 'utf8');
  const data        = yaml.load(raw);
  const { version, date } = data;
  const numeric     = version.replace(/^[a-z]/i, '');  // drop leading channel
  const type        = semverDiff(previousVersion, numeric);

  // Determine prefix based on type
  const prefix = type === 'major'
    ? 'Major Update - '
    : type === 'minor'
      ? 'Minor Update - '
      : 'Patch - ';

  /* 1.1  Build MDX ------------------------------------------------------- */
  const mdxBody     = generateMDX(data, prefix);
  const mdxFilename = `${version}.mdx`;
  await fs.writeFile(path.join(OUT_MDX, mdxFilename), mdxBody, 'utf8');

  /* 1.2  Track meta ------------------------------------------------------ */
  meta.push({ version: numeric, date, type });
  const exportName  = version.replace(/[^a-zA-Z0-9]/g, '_');
  barrel.push(`export { default as ${exportName} } from './mdx/${mdxFilename}';\n`);
  previousVersion = numeric;
}

barrel.push(
  '\nexport const changelogOrder = [\n',
  ...meta.map(m => `  '${m.version.replace(/[^a-zA-Z0-9]/g, '_')}',\n`),
  '];\n',
);

await Promise.all([
  fs.writeFile(META_PATH,  JSON.stringify(meta, null, 2)),
  fs.writeFile(INDEX_PATH, barrel.join('')),
]);

console.log(`✓  Generated ${meta.length} releases, meta + manifest.`);

/* ======================================================================== */
/* Helpers                                                                  */
/* ======================================================================== */

/**
 * Build a single MDX file (without YAML front-matter).
 * Accepts a prefix for the version header.
 */
function generateMDX(data, prefix = '') {
  const { version, date: dateStr, notes = '', entries = {} } = data;

  // import icons
  const iconImports = "import { Plus, Minus, Edit3, CheckCircle, Info } from 'lucide-react';";

  // Format date as "Weekday - Month Day, Year"
  const dateObj = new Date(dateStr);
  const weekday = dateObj.toLocaleDateString('en-US', { weekday: 'long' });
  const rest    = dateObj.toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' });
  const formattedDate = `${weekday} - ${rest}`;

  // Header block: wrap version and date in a flex container for right-alignment
  const headerLines = [
    '<div className="flex justify-between items-baseline">',
    `  <h1>${prefix}${version}</h1>`,
    `  <div className="mx-8">${formattedDate}</div>`,
    '</div>',
    '',    // blank line after header container
  ];
  if (notes.trim()) {
    const italicised = notes
      .trim()
      .split(/\n{2,}/)           // split paragraphs
      .map(p => `_${p}_`)
      .join('\n\n');
    headerLines.push(italicised);
  }

  // Sections
  const sections = Object.entries(entries)
    .map(([scope, section]) => renderSection(scope, section))
    .filter(Boolean)             // drop empty scopes
    .join('\n\n');

  // prepend imports
  return `${iconImports}\n\n${headerLines.join('\n')}\n\n${sections}\n`;
}

/**
 * Render one “scope” (e.g. editor / website) section.
 * The entire block is omitted if every subsection is empty.
 */
function renderSection(scope, section) {
  const { notes = '', added = [], changed = [], fixed = [], removed = [], other = [] } = section;

  const blocks = [
    notes && `_${notes}_`,
    renderList('Added',   added),
    renderList('Changed', changed),
    renderList('Fixed',   fixed),
    renderList('Removed', removed),
    renderList('Other',   other),
  ].filter(Boolean);

  if (!blocks.length) return '';                 // nothing to show

  return `## ${titleCase(scope)}\n\n${blocks.join('\n\n')}`;
}

/**
 * Render one Added/Changed/… list with icons.
 */
function renderList(title, items) {
  if (!items?.length) return '';
  const iconMap = {
    Added:    { icon: 'Plus',       color: '#7cae93' },
    Removed:  { icon: 'Minus',      color: '#c96e5a' },
    Changed:  { icon: 'Edit3',      color: '#f3dbba' },
    Fixed:    { icon: 'CheckCircle',color: '#f3dbba' },
    Other:    { icon: 'Info',       color: '#f3dbba' },
  };
  const { icon, color } = iconMap[title] || iconMap.Other;
  const itemsList = items
    .map(i =>
      `<div className="flex items-start gap-2 my-1">
        <span className="shrink-0 self-start pt-[4]" style={{ width: 22, height: 22, display: 'inline-flex' }}>
          <${icon} color="${color}" size={20} />
        </span>
        <span className="whitespace-pre-line">${i}</span>
      </div>`
    )
    .join('\n');

  return [
    '<div className="pl-4 m-2 border-none rounded-2xl border-b-gray-600">',
    `### ${title}`,
    itemsList,
    '</div>'
  ].join('\n');
}

/**
 * Convert “editor” → “Editor”, “desktop client” → “Desktop Client”.
 */
function titleCase(str) {
  return str.replace(/\b\w+/g, w => w[0].toUpperCase() + w.slice(1));
}
